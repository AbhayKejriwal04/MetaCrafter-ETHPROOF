// SPDX-License-Identifier: MIT
pragma solidity ^0.8.3;

contract Structs{
    struct Car{
        string model;
        uint year;
        address owner;
    }

    Car public car;  //state variable of struct
    Car[] public cars; //array of struct
    mapping (address=> Car[]) public carsByOwner; //mapping from owner to cars

    function examples() external {
        //ways to initialise a struct
        Car memory toyota=Car("Toyota",1990,msg.sender);
        Car memory lambo = Car({model: "Lambo",year: 1990,owner:msg.sender});
        Car memory tesla;
        tesla.model="tesla";
        tesla.year=1990;
        tesla.owner=msg.sender;

        cars.push(toyota);
        cars.push(lambo);
        cars.push(tesla);

        cars.push(Car("Ferrari", 2000, msg.sender));

        Car storage _car = cars[0];  //if we use memory that means we don't need modification for this 
        //storage keyword is used for modification or updation of the values of the variable
        _car.year=1998;
        delete  _car.owner; //delete only the particular value of the data
       
        delete cars[1]; //delete or reset the data of the index value 1 to default 

    }

    //for finding out the gas price used
    function testGas() view public returns (uint){
        return tx.gasprice;
    }
}
